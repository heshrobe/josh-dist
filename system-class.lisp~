#+Allegro
(eval-when (:compile-toplevel :load-top-level :execute)
  (defclass separate-destination-module (defsys:lisp-module)
    ())

  (defmethod defsys:product-pathname ((module separate-destination-module))
    (let ((source-pathname (ds:source-pathname module)))
      (let* ((my-directory (append (butlast (pathname-directory source-pathname)) 
				   (list (format nil "~a-binaries"
						 #+(and unix solaris2) 'solaris
						 #+(and unix macosx) 'macosx
						 #+(and unix (not macosx) (not solaris2)) 'linux
						#+MSWindows 'windows))))
	     (full-pathname (make-pathname :directory my-directory
					   :host (pathname-host source-pathname)
					   :device (pathname-device source-pathname)
					   :name (pathname-name source-pathname)
					   )))
	(ensure-directories-exist full-pathname)
	full-pathname))))
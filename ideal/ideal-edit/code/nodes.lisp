;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: IDEAL-EDIT -*-(in-package "IDEAL-EDIT");;;;********************************************************;;;;  Copyright (c) 1989, 1992 Rockwell International -- All rights reserved.;;;;  Rockwell International Science Center Palo Alto Lab;;;;********************************************************;;;----------------(defclass selectable-thing ()    ((selected :initform nil)));;;----------------;;;   ooooooo             NODE AND LINK TYPES;;;----------------;;; The types which we 'put on top of' the IDEAL representation.;;; This contains the information needed to display the graphics for;;; the node, and do the various editing operations on it.;;; Some of the data is duplicated with respect to the underlying;;; representation.(defclass graph-node (selectable-thing)  ((ideal-node          :initform nil)              ; underlying node   (center-x            :initform 0)                ; where on display   (center-y            :initform 0)   (display-record      :initform nil)              ; handle on display   (node-editor         :initform nil)              ; pop-up editor   (name                :initform (keywordize (gensym "NODE")))   (states              :initform (list :false :true))   (ideal-type)                                     ; ideal flags -- constant   (ideal-relation-type)			; per concrete type   (ideal-noisy-or-subtype  :initform nil)))                         ;; concrete classes(defclass probability-node (graph-node)  ((ideal-type          :initform ':chance)   (ideal-relation-type :initform ':prob)))(deftype node-types () `(member probability-node noisy-or-node;;;				function-node 				deterministic-node				decision-node value-node))(defclass noisy-or-node (probability-node)  ((ideal-noisy-or-subtype :initform ':binary)))(defclass deterministic-node (graph-node)  ((ideal-type          :initform ':chance)   (ideal-relation-type :initform ':det)))(defclass decision-node (graph-node)  ((ideal-type          :initform ':decision)   (ideal-relation-type :initform ':det)   (solved-node         :initform nil)))(defclass value-node (graph-node)  ((ideal-type          :initform ':value)   (ideal-relation-type :initform ':det)   (solved-value        :initform nil)))(defmethod print-object ((node graph-node) stream)  (format stream "~(#<~a ~a>~)" (type-of node) (slot-value node 'name)));;;----------------(defclass link (selectable-thing)  ((from-node :initarg :from :reader from-node)   (to-node   :initarg :to   :reader to-node)   (display-record :initform nil)   (vertex-list :initform nil)))(defmethod print-object ((link link) stream)  (format stream "~(#<link ~a->~a>~)"	  (slot-value (slot-value link 'from-node) 'name)	  (slot-value (slot-value link 'to-node) 'name)));;;----------------;;;   ooooooo                 NODE METHODS;;;----------------(defmethod ideal-init ((node graph-node) ideal-diagram)  (with-slots (ideal-node name states ideal-type ideal-relation-type) node     (when ideal-node       (error "Bug: attempt to initialize node ~a twice" name))     (multiple-value-bind (new-ideal-diagram new-ideal-node)	   (ideal:add-node ideal-diagram 			   :name name :type ideal-type 			   :relation-type ideal-relation-type 			   :state-labels states)       (setq ideal-node new-ideal-node)       (values new-ideal-diagram))))(defmethod ideal-init ((node value-node) ideal-diagram)  (with-slots (ideal-node name states ideal-type ideal-relation-type) node     (when ideal-node       (error "Bug: attempt to initialize node ~a twice" name))     (multiple-value-bind (new-ideal-diagram new-ideal-node)	   (ideal:add-node ideal-diagram 			   :name name :type ideal-type 			   :relation-type ideal-relation-type)       (setq ideal-node new-ideal-node)       (values new-ideal-diagram))))(defmethod ideal-init ((node noisy-or-node) ideal-diagram)  (with-slots (ideal-node name states ideal-type			  ideal-relation-type ideal-noisy-or-subtype) node     (when ideal-node       (error "Bug: attempt to initialize node ~a twice" name))     (multiple-value-bind (new-ideal-diagram new-ideal-node)	   (ideal:add-node ideal-diagram 			   :name name			   :noisy-or t			   :noisy-or-subtype ideal-noisy-or-subtype			   :state-labels states)       (setq ideal-node new-ideal-node)       (values new-ideal-diagram))));;;----------------(defmethod ideal-delete ((node graph-node) ideal-diagram)  (with-slots (ideal-node) node     (unless ideal-node       (error "Bug: attempt to delete non-initialized node (~a)" node))     (prog1       (ideal:delete-node ideal-node ideal-diagram)       (setf ideal-node nil))));;;----------------(defmethod close-node-editor ((node graph-node))  (with-slots (node-editor) node    (when node-editor      (close-node-editor node-editor)      (setf node-editor nil))))(defmethod touch-node ((node graph-node))  (with-slots (node-editor) node    (redraw-self node)    (when node-editor      (touch-node-editor node-editor))));;;----------------;;;   ooooooo                 LINK METHODS;;;----------------(defmethod ideal-init ((link link) ideal-diagram)  (with-slots (from-node to-node) link    (let ((ideal-from-node (slot-value from-node 'ideal-node))	  (ideal-to-node (slot-value to-node 'ideal-node)))      (unless (and ideal-from-node ideal-to-node)	(error "Bug: attempt to connect non-initialized nodes"))      (ideal:add-arcs ideal-to-node (list ideal-from-node))      (values ideal-diagram))))(defmethod ideal-delete ((link link) ideal-diagram)  (with-slots (from-node to-node) link    (let ((ideal-from-node (slot-value from-node 'ideal-node))	  (ideal-to-node (slot-value to-node 'ideal-node)))      (unless (and ideal-from-node ideal-to-node)	(error "Bug: attempt to delete link from un-initialized nodes"))      (ideal:delete-arcs ideal-to-node (list ideal-from-node))      (values ideal-diagram))))   (defun is-connected-to (link node)  (or (is-link-to link node) (is-link-from link node)))(defun is-link-to (link node)  (eq (to-node link) node))(defun is-link-from (link node)  (eq (from-node link) node))  
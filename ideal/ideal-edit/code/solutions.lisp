;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: IDEAL-EDIT -*-(in-package "IDEAL-EDIT");;;;********************************************************;;;;  Copyright (c) 1989, 1992 Rockwell International -- All rights reserved.;;;;  Rockwell International Science Center Palo Alto Lab;;;;********************************************************;;;----------------;;;   ooooooo              GRAPH SOLUTION TECHNIQUES;;;----------------;;; utilities(defun has-virtual-evidence (ideal-diagram)  (some #'(lambda (n) (and (ideal::node-state n)			   (listp (ideal::node-state n))))	ideal-diagram))(defmacro is-initialized (graph alg)  `(ideal::initialized-diagram ,graph :error-mode nil                               :algorithm-type ,alg));;; in order to be able to reuse clique and join trees,;;; we store them along with their generation number;;; in the form (struct . generation);;; Note: this is still not perfect -- if someone exits;;; the editor, changes the diagram, creates a new;;; clique-diagram, and then re-enters the editor,;;; the editor will use the wrong clique-diagram, and;;; ideal won't catch it either.(defun fetch-structure-if-ok (struct-name)  (let ((st (get-graph-structure struct-name)))    (when (and st (= (cdr st) (structure-generation)))      (car st))))(defun put-structure (name val)  (when (get-graph-editor)    (put-graph-structure name (cons val (structure-generation)))));;;----------------;;;   ooooooo                     BAYES NETS;;;----------------;;; --- these two work with virtual evidence...(defun do-poly-tree (ideal-diagram)  (unless (is-initialized ideal-diagram :POLY-TREE)    (ideal:set-up-for-poly-tree-infer ideal-diagram))  (ideal:poly-tree-infer ideal-diagram))(defun do-pearl-clustering (ideal-diagram)  (let ((cliques (fetch-structure-if-ok 'clique-tree)))    (unless (and cliques (is-initialized ideal-diagram :CLUSTERING))      (setf cliques (ideal:create-clique-diagram ideal-diagram))      (setf *diagram-cliques* cliques)      (put-structure 'clique-tree cliques))    (ideal:clustering-infer cliques ideal-diagram)));;; --- these three do not.(defun do-jensen-clustering (ideal-diagram)  (when (has-virtual-evidence ideal-diagram)    (error "Jensen Clustering does not work with virtual evidence"))  (let ((join-tree (fetch-structure-if-ok 'join-tree)))    (unless (and join-tree (is-initialized ideal-diagram :JENSEN))      (setf join-tree (ideal:create-jensen-join-tree ideal-diagram))      (setf *diagram-join-tree* join-tree)      (put-structure 'join-tree join-tree))    (ideal:jensen-infer join-tree ideal-diagram)))(defun do-conditioning (ideal-diagram)  (when (has-virtual-evidence ideal-diagram)    (error "Conditioning does not work with virtual evidence"))  (ideal:conditioning-infer ideal-diagram))(defun do-simulation (ideal-diagram)  (when (has-virtual-evidence ideal-diagram)    (error "Simulation does not work with virtual evidence"))  (unless (is-initialized ideal-diagram :SIMULATION)    (ideal:set-up-for-simulation-infer ideal-diagram))  (ideal:simulation-infer ideal-diagram));;;----------------;;;   ooooooo               INFLUENCE DIAGRAMS;;;----------------;;; influence diagrams have a habit of destroying the network.;;; so what we do is make a copy of the network, solve that,;;; then copy the relevant information to fields in the graph-editor;;; structures (if available).(defun do-shac-eval (ideal-diagram)  (do-eval ideal-diagram #'ideal:shac-eval))(defun do-ides-eval (ideal-diagram)  (do-eval ideal-diagram #'ideal:ides-eval))(defun do-eval (ideal-diagram eval-fn)  (let ((result (funcall eval-fn (ideal:copy-diagram ideal-diagram))))    (cond ((get-graph-editor)	   (mapc #'influence-fixup result)	   (values ideal-diagram))	  (t 	   ;; this is just a hack so that I can call the evaluation	   ;; functions from outside ideal-edit.	   (values result)))))(defun influence-fixup (node)  (let ((editor-node (find-node-named (ideal:node-name node))))    (cond ((ideal:decision-node-p node)	   ;; keep the whole node	   (setf (slot-value editor-node 'solved-node) node))	  ((ideal:value-node-p node)	   ;; keep just the solved value	   (setf (slot-value editor-node 'solved-value)                 (aref (ideal:distribution-repn node) 0)))	  (t	   (error "Bug: influence evaluation returned wrong node ~a" node)))));;;----------------;;;   ooooooo                    the menu;;;----------------(defun define-solve-menu ()  (list (list "Poly Tree" :value #'do-poly-tree	      :documentation	      "Pearl Propogation for Bayes' Nets (Poly-trees only)")	(list "Pearl Clustering" :value #'do-pearl-clustering	      :documentation	      "Pearl Clustering for (Multiply-connected) Bayes' Nets")	(list "Jensen Clustering" :value #'do-jensen-clustering	      :documentation	      "Fusion and Propogation for (Multiply-connected) Bayes' Nets")	(list "Conditioning" :value #'do-conditioning	      :documentation	      "Pearl Conditioning for (Multiply-connected) Bayes' Nets")	(list "Simulation" :value #'do-simulation	      :documentation	      "Simulation for (Multiply-connected) Bayes' Nets")	(list "Shachter Evaluation" :value #'do-shac-eval	      :documentation	      "Shachter Evaluation for Influence Diagrams")	(list "IDES Evaluation" :value #'do-ides-eval	      :documentation	      "IDES Evaluation for Influence Diagrams")	))
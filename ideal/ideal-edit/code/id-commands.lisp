;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: IDEAL-EDIT -*-(in-package "IDEAL-EDIT");;;;********************************************************;;;;  Copyright (c) 1989, 1992 Rockwell International -- All rights reserved.;;;;  Rockwell International Science Center Palo Alto Lab;;;;********************************************************;;;----------------;;;   ooooooo           INFLUENCE DIAGRAM COMMANDS;;;----------------;;; Note: what we would really like to do here is specify arguments;;; to the commands, but then I don't know how to put them into a;;; sub-menu (when you select from a sub command menu, you get back;;; the command object, and I don't know what to invoke to fill in;;; the arguments for the command);;; Note2: One obvious improvement would be to not re-draw the;;; entire diagram for all of these, but instead just draw the;;; parts we know to have changed.(defun barren-node-test (node)  (and (typep node 'graph-node)       (ideal:barren-node-p (slot-value node 'ideal-node))))(define-presentation-type barren-node ())(define-presentation-translator node-to-barren-node    (graph-node barren-node graph-editor		:tester ((object)			 (barren-node-test object))		:tester-definitive t)  (object)  (values object))(define-presentation-method presentation-typep    (object (type barren-node))  (barren-node-test object))(define-presentation-type probability-node ()  )(define-command (com-remove-barren-node :command-table id-commands :menu t) ()  (with-slots (ideal-diagram) *application-frame*    (let ((node (accept-from-display 'barren-node "Select Node to Remove"))	  #+(or lucid mcl) hold #+(or lucid mcl) new-diagram	  )      (when node	(handler-case #-(or lucid mcl) (ideal:remove-barren-node			       (slot-value node 'ideal-node)			       ideal-diagram)		      #+(or lucid mcl) (setq new-diagram (ideal:remove-barren-node						 (slot-value node 'ideal-node)						 ideal-diagram))	  (simple-error (c)	    #+(or lucid mcl) (setq hold t)	    (beep-message "~a" c))	  #-(or lucid mcl)	  (:no-error (new-diagram)	     (set-new-diagram new-diagram)))	#+(or lucid mcl) (unless hold		  (set-new-diagram new-diagram)		  )	))))(define-command (com-remove-all-barren-nodes		 :command-table id-commands :menu t) ()  (with-slots (ideal-diagram) *application-frame*    (let (#+(or lucid mcl) hold #+(or lucid mcl) new-diagram)      (handler-case #-(or lucid mcl) (ideal:remove-all-barren-nodes ideal-diagram)		    #+(or lucid mcl) (setq new-diagram				  (ideal:remove-all-barren-nodes ideal-diagram))		    (simple-error (c)				  #+(or lucid mcl) (setq hold t)				  (beep-message "~a" c))		    #-(or lucid mcl)		    (:no-error (new-diagram)			       (set-new-diagram new-diagram)))      #+(or lucid mcl) (unless hold (set-new-diagram new-diagram))      )))(define-command (com-absorb-chance-node :command-table id-commands :menu t)    ()  (with-slots (ideal-diagram) *application-frame*    (let ((node (accept-from-display 'probability-node "Select Node to Absorb"))	  #+(or lucid mcl) hold #+(or lucid mcl) new-diagram	  )      (when node	(handler-case #-(or lucid mcl) (ideal:absorb-chance-node			       (slot-value node 'ideal-node)			       ideal-diagram)		      #+(or lucid mcl) (setq new-diagram (ideal:absorb-chance-node						 (slot-value node 'ideal-node)						 ideal-diagram))		      (simple-error (c)				    #+(or lucid mcl) (setq hold t)				    (beep-message "~a" c))		      #-(or lucid mcl)		      (:no-error (new-diagram)				 (set-new-diagram new-diagram)))	#+(or lucid mcl) (unless hold (set-new-diagram new-diagram))	))))(define-command (com-remove-decision-node :command-table id-commands :menu t)    ()  (with-slots (ideal-diagram) *application-frame*     (let ((node (accept-from-display 'decision-node "Select Decision Node to Remove"))	   #+(or lucid mcl) hold #+(or lucid mcl) new-diagram	   )       (when node	 (handler-case #-(or lucid mcl) (ideal:remove-decision-node				(slot-value node 'ideal-node)				ideal-diagram)		       #+(or lucid mcl) (setq new-diagram (ideal:remove-decision-node						  (slot-value node 'ideal-node)						  ideal-diagram))		       (simple-error (c)				     #+(or lucid mcl) (setq hold t)				     (beep-message "~a" c))		       #-(or lucid mcl)		       (:no-error (new-diagram old-node)				  (declare (ignore old-node))				  (set-new-diagram new-diagram)))	 #+(or lucid mcl) (unless hold (set-new-diagram new-diagram))	 ))))(define-command (com-reverse-arc :command-table id-commands :menu t) ()  (with-slots (ideal-diagram) *application-frame*    (let ((link (accept-from-display 'link "Select Link to Reverse"))	  #+(or lucid mcl) hold #+(or lucid mcl) new-diagram	  )      (when link	(with-slots (from-node to-node) link	   (handler-case #-(or lucid mcl) (ideal:reverse-arc				  (slot-value from-node 'ideal-node)				  (slot-value to-node 'ideal-node)				  ideal-diagram)			 #+(or lucid mcl) (setq new-diagram (ideal:reverse-arc						    (slot-value from-node 'ideal-node)						    (slot-value to-node 'ideal-node)						    ideal-diagram))			 (simple-error (c)				       #+(or lucid mcl) (setq hold t)				       (beep-message "~a" c))			 #-(or lucid mcl) 			 (:no-error (new-diagram)				    (set-new-diagram new-diagram)))		    #+(or lucid mcl) (unless hold (set-new-diagram new-diagram))		    )))))(define-command (com-reduce-deterministic-node		 :command-table id-commands :menu t) ()  (with-slots (ideal-diagram) *application-frame*    (let ((node (accept-from-display 'deterministic-node				     "Select Deterministic Node to Reduce"))	  #+(or lucid mcl) hold #+(or lucid mcl) new-diagram	  )      (when node	(handler-case #-(or lucid mcl)  (ideal:reduce-deterministic-node				(slot-value node 'ideal-node)				ideal-diagram)		      #+(or lucid mcl) (setq new-diagram  (ideal:reduce-deterministic-node						  (slot-value node 'ideal-node)						  ideal-diagram))		      (simple-error (c)				    #+(or lucid mcl) (setq hold t)				    (beep-message "~a" c))		      #-(or lucid mcl)		      (:no-error (new-diagram)				 (set-new-diagram new-diagram)))	#+(or lucid mcl) (unless hold (set-new-diagram new-diagram))	))))(define-command (com-reduce-probabilistic-node		 :command-table id-commands :menu t) ()  (with-slots (ideal-diagram) *application-frame*    (let ((node (accept-from-display 'probability-node				     "Select Probabilistic Node to Reduce"))	  #+(or lucid mcl) hold #+(or lucid mcl) new-diagram	  )      (when node	(handler-case #-(or lucid mcl)  (ideal:reduce-probabilistic-node				(slot-value node 'ideal-node)				ideal-diagram)		      #+(or lucid mcl) (setq new-diagram  (ideal:reduce-probabilistic-node						  (slot-value node 'ideal-node)						  ideal-diagram))		      (simple-error (c)				    #+(or lucid mcl) (setq hold t)				    (beep-message "~a" c))		      #-(or lucid mcl)		      (:no-error (new-diagram)				 (set-new-diagram new-diagram)))	#+(or lucid mcl) (unless hold (set-new-diagram new-diagram))	))))(define-command (com-reduce-all-deterministic-nodes		 :command-table id-commands :menu t) ()  (with-slots (ideal-diagram) *application-frame*    (let (#+(or lucid mcl) hold #+(or lucid mcl) new-diagram)      (handler-case #-(or lucid mcl) (ideal:reduce-all-deterministic-nodes ideal-diagram)		    #+(or lucid mcl) (setq new-diagram				  (ideal:reduce-all-deterministic-nodes ideal-diagram))		    (simple-error (c)				  #+(or lucid mcl) (setq hold t)				  (beep-message "~a" c))		    #-(or lucid mcl)		    (:no-error (new-diagram)			       (set-new-diagram new-diagram)))      #+(or lucid mcl) (unless hold (set-new-diagram new-diagram))      )))